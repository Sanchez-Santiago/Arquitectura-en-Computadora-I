ADD R2, R0, #0X80 //LED QUE SE PRENDEN
ADD R3, R0, R0 //CONTADOR
SUB R4, R0, R0 //RESTAS PARA COMPARACION
SUB R5, R0, //POSICION DE LA DIRECCION DE LA MEMORIA
ADD R6, R0, #40 //DATO PARA AMUMENTARO O DISMINUR LOS VALORES DE LEDS PRENDIDOS
ADD R7, R0, //AUX
SUB R11, R0, R0 //AUX

STR R0, [R0, 800] //LEDS APAGADOS
B //SALTO AL MODULO PARA VER SI SE PRECIONA EL RESET
B //AUMENTAR O BAJAR LA VELOCIDAD O SALIR (BOTON)
B //SALTO AL MODULO DEL EL DELAY

LDR R8, [R5, 0X80]
SUB R8, R8, R7  //INCREMENTAMOS LA VELOCIDAD
STR R8, [R5, 0X80]

STR R2, [R0, 800] //PRENDEMOS EL LED
B //SALTO AL MODULO PARA VER SI SE PRECIONA EL RESET
B //AUMENTAR O BAJAR LA VELOCIDAD O SALIR (BOTON)
B //SALTO AL MODULO DEL EL DELAY

ADD R3, R3, 1 //AUMENTAMOS EL CONTADOR
SUBS R4, R3, #6
BNQ //SALTO A LEDS APAGADOS

STR R2, [R0, 800] //PRENDEMOS EL LED
B //AUMENTAR O BAJAR LA VELOCIDAD O SALIR
B //SALTO AL MODULO PARA VER SI SE PRECIONA EL RESET
B //SALTO AL MODULO DEL EL DELAY

LDR R8, [R5, 0X80]
SUB R8, R8, R7  //INCREMENTAMOS LA VELOCIDAD
STR R8, [R5, 0X80]

B //DIVIDIR EL R6
ADD R2, R2, R6//INCREMENTAMOS LOS LEDS PRENDIDOS

STR R2, [R0, 0X800]
B //AUMENTAR O BAJAR LA VELOCIDAD O SALIR
B //SALTO AL MODULO PARA VER SI SE PRECIONA EL RESET
B //SALTO AL MODULO DEL EL DELAY

ADD R3, R3, 1 //AUMENTAMOS EL CONTADOR
SUBS R4, R3, #13
BNQ //SALTO A DIVIDIR R6

STR R2, [R0, 0X800]
B //SALTO AL MODULO PARA VER SI SE PRECIONA EL RESET
B //SALTO AL MODULO DEL EL DELAY

ADD R6, R0, #0x40      // R6 = 0x40 (para apagar el primer bit)

loop:
STR R2, [R0, 0x800] // Almacena el valor actual de R2
B // Aumentar o bajar la velocidad o salir
B // Salto al módulo para ver si se presiona el reset
B // Salto al módulo del delay

// Apagar el siguiente bit en la secuencia
SUB R2, R2, R6        // R2 = R2 - R6; apaga el siguiente bit

// Duplicar R6 para el siguiente bit (R6 = R6 * 2)
ADD R6, R6, R6       // Duplicar el valor de R6

// Comprobar si R6 ha alcanzado 0x80 (límite para terminar)
SUBS R11, R6, #0x80   // R11 = R6 - 0x80; activa las banderas
BEQ COMIENSO DE LA SECUANCIA            // Si R11 es 0 (es decir, R6 es 0x80), salta a la etiqueta 'end'

// Restaurar R6 a su valor original para la próxima iteración
SUB R6, R6, #0x80     // R6 = R6 - 0x80
B loop                // Vuelve al inicio de la secuencia
    
    
//MODULOS

//DELAY
LDR R8, [R5, 0X80] //LEEMOS EL ARCHIVO PARA SACAR LA VELOCIDAD
SUBS R8, R8, #1
BNE  ARRIBA// DELAY
B R14 // RETORNA A LA LLAMADA DE LA FUNCION

//RESET
LDR R9, [R0, 0X800] // RESET MODULE
ANDS R8, R9, #0x00 BOTON RESET
BEQ //SALTO ALCOMIENSO
B R14 // RETORNA A LA LLAMADA DE LA FUNCION

//DIVICION
SUBS R6, R6, #2 ;
ADD R7, R7, #1 ;
BNE //DIVICION
ADD R6, R0, R7
B R14

//AUMENTAR O BAJAR LA VELOCIDAD O SALIR (BOTON)
LDR R9, [R0, 0X800] // LEER LAS ENTRADAS
ANDS R8, R9, #0x10 BOTON
BNE 14
B //DELAY (VER SI HAY QUE USAR OTRO DELAY)
LDR R9, [R0, 0X800] // LEER LAS ENTRADAS
ANDS R8, R9, #0x10 BOTON 
BNE // SALTO AL MENU
ANDS R8, R9, #0x8 // LLAVE LEVANTADA 
LDR R8, [R5, 0X80]
BNQ  //INCREMENTAMOS LA VELOCIDAD
ADD R8, R8, R7  //DECREMENTAMOS LA VELOCIDAD
STR R8, [R5, 0X80]
B R14 // RETORNA A LA LLAMADA DE LA FUNCION
SUB R8, R8, R7  //INCREMENTAMOS LA VELOCIDAD
STR R8, [R5, 0X80]
B R14 // RETORNA A LA LLAMADA DE LA FUNCION

